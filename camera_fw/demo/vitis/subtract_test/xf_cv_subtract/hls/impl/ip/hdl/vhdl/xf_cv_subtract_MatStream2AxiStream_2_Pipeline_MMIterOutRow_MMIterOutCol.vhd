-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity xf_cv_subtract_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    imgOutput_data_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    imgOutput_data_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    imgOutput_data_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    imgOutput_data_empty_n : IN STD_LOGIC;
    imgOutput_data_read : OUT STD_LOGIC;
    ldata_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    ldata_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    ldata_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    ldata_full_n : IN STD_LOGIC;
    ldata_write : OUT STD_LOGIC;
    localbuffer_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    localbuffer_1_out_ap_vld : OUT STD_LOGIC;
    filled_1_out : OUT STD_LOGIC_VECTOR (5 downto 0);
    filled_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of xf_cv_subtract_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv21_1FA400 : STD_LOGIC_VECTOR (20 downto 0) := "111111010010000000000";
    constant ap_const_lv21_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_38 : STD_LOGIC_VECTOR (5 downto 0) := "111000";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln1301_reg_281 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal icmp_ln1324_reg_301 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1301_fu_119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal imgOutput_data_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ldata_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1301_reg_281_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal val_reg_285 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln1316_fu_140_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1316_reg_290 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempval_fu_147_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempval_reg_296 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1324_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1332_fu_169_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln1332_reg_305 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_reg_310 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1332_1_fu_183_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln1332_1_reg_315 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal filled_fu_62 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln1333_fu_189_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1325_fu_200_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal localbuffer_fu_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal localbuffer_2_fu_236_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal localbuffer_1_fu_214_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal indvar_flatten_fu_70 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    signal add_ln1301_fu_125_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (20 downto 0);
    signal imgOutput_data_read_local : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ldata_write_local : STD_LOGIC;
    signal zext_ln1320_fu_143_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_153_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln1332_1_fu_223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1332_fu_220_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1332_fu_226_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1332_fu_231_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_298 : BOOLEAN;
    signal ap_condition_302 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component xf_cv_subtract_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component xf_cv_subtract_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    filled_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    filled_fu_62 <= ap_const_lv6_0;
                elsif ((ap_const_boolean_1 = ap_condition_302)) then 
                    filled_fu_62 <= add_ln1325_fu_200_p2;
                elsif ((ap_const_boolean_1 = ap_condition_298)) then 
                    filled_fu_62 <= add_ln1333_fu_189_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1301_fu_119_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_70 <= add_ln1301_fu_125_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_70 <= ap_const_lv21_0;
                end if;
            end if; 
        end if;
    end process;

    localbuffer_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    localbuffer_fu_66 <= ap_const_lv32_0;
                elsif (((icmp_ln1324_reg_301 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    localbuffer_fu_66 <= localbuffer_1_fu_214_p2;
                elsif (((icmp_ln1324_reg_301 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    localbuffer_fu_66 <= localbuffer_2_fu_236_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln1301_reg_281 <= icmp_ln1301_fu_119_p2;
                icmp_ln1301_reg_281_pp0_iter1_reg <= icmp_ln1301_reg_281;
                val_reg_285 <= imgOutput_data_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln1324_reg_301 <= icmp_ln1324_fu_163_p2;
                sub_ln1332_1_reg_315 <= sub_ln1332_1_fu_183_p2;
                sub_ln1332_reg_305 <= sub_ln1332_fu_169_p2;
                tempval_reg_296 <= tempval_fu_147_p2;
                tmp_6_reg_310 <= sub_ln1332_fu_169_p2(5 downto 5);
                    zext_ln1316_reg_290(23 downto 0) <= zext_ln1316_fu_140_p1(23 downto 0);
            end if;
        end if;
    end process;
    zext_ln1316_reg_290(31 downto 24) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1301_fu_125_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv21_1));
    add_ln1325_fu_200_p2 <= std_logic_vector(unsigned(filled_fu_62) + unsigned(ap_const_lv6_18));
    add_ln1333_fu_189_p2 <= std_logic_vector(unsigned(filled_fu_62) + unsigned(ap_const_lv6_38));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_block_state2_pp0_stage0_iter1, ap_block_state4_pp0_stage0_iter3)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_block_state2_pp0_stage0_iter1, ap_block_state4_pp0_stage0_iter3)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_block_state2_pp0_stage0_iter1, ap_block_state4_pp0_stage0_iter3)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(imgOutput_data_empty_n, icmp_ln1301_reg_281)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((icmp_ln1301_reg_281 = ap_const_lv1_0) and (imgOutput_data_empty_n = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage0_iter3_assign_proc : process(ldata_full_n, icmp_ln1324_reg_301)
    begin
                ap_block_state4_pp0_stage0_iter3 <= ((icmp_ln1324_reg_301 = ap_const_lv1_0) and (ldata_full_n = ap_const_logic_0));
    end process;


    ap_condition_298_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln1301_reg_281_pp0_iter1_reg, icmp_ln1324_fu_163_p2)
    begin
                ap_condition_298 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1324_fu_163_p2 = ap_const_lv1_0) and (icmp_ln1301_reg_281_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_302_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln1301_reg_281_pp0_iter1_reg, icmp_ln1324_fu_163_p2)
    begin
                ap_condition_302 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1324_fu_163_p2 = ap_const_lv1_1) and (icmp_ln1301_reg_281_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln1301_fu_119_p2)
    begin
        if (((icmp_ln1301_fu_119_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, icmp_ln1301_reg_281_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln1301_reg_281_pp0_iter1_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter2_reg, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_70)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv21_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_70;
        end if; 
    end process;

    filled_1_out <= filled_fu_62;

    filled_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1301_reg_281_pp0_iter1_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (icmp_ln1301_reg_281_pp0_iter1_reg = ap_const_lv1_1))) then 
            filled_1_out_ap_vld <= ap_const_logic_1;
        else 
            filled_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1301_fu_119_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv21_1FA400) else "0";
    icmp_ln1324_fu_163_p2 <= "1" when (tmp_fu_153_p4 = ap_const_lv3_0) else "0";

    imgOutput_data_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, imgOutput_data_empty_n, icmp_ln1301_reg_281, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln1301_reg_281 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgOutput_data_blk_n <= imgOutput_data_empty_n;
        else 
            imgOutput_data_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    imgOutput_data_read <= imgOutput_data_read_local;

    imgOutput_data_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1301_reg_281, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1301_reg_281 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgOutput_data_read_local <= ap_const_logic_1;
        else 
            imgOutput_data_read_local <= ap_const_logic_0;
        end if; 
    end process;


    ldata_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, ldata_full_n, icmp_ln1324_reg_301, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln1324_reg_301 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ldata_blk_n <= ldata_full_n;
        else 
            ldata_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ldata_din <= localbuffer_1_fu_214_p2;
    ldata_write <= ldata_write_local;

    ldata_write_local_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln1324_reg_301, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1324_reg_301 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ldata_write_local <= ap_const_logic_1;
        else 
            ldata_write_local <= ap_const_logic_0;
        end if; 
    end process;

    localbuffer_1_fu_214_p2 <= (tempval_reg_296 or localbuffer_fu_66);
    localbuffer_1_out <= localbuffer_fu_66;

    localbuffer_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1301_reg_281_pp0_iter1_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (icmp_ln1301_reg_281_pp0_iter1_reg = ap_const_lv1_1))) then 
            localbuffer_1_out_ap_vld <= ap_const_logic_1;
        else 
            localbuffer_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    localbuffer_2_fu_236_p3 <= 
        shl_ln1332_fu_226_p2 when (tmp_6_reg_310(0) = '1') else 
        lshr_ln1332_fu_231_p2;
    lshr_ln1332_fu_231_p2 <= std_logic_vector(shift_right(unsigned(zext_ln1316_reg_290),to_integer(unsigned('0' & sext_ln1332_fu_220_p1(31-1 downto 0)))));
        sext_ln1332_1_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1332_1_reg_315),32));

        sext_ln1332_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1332_reg_305),32));

    shl_ln1332_fu_226_p2 <= std_logic_vector(shift_left(unsigned(zext_ln1316_reg_290),to_integer(unsigned('0' & sext_ln1332_1_fu_223_p1(31-1 downto 0)))));
    sub_ln1332_1_fu_183_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(sub_ln1332_fu_169_p2));
    sub_ln1332_fu_169_p2 <= std_logic_vector(signed(ap_const_lv6_20) - signed(filled_fu_62));
    tempval_fu_147_p2 <= std_logic_vector(shift_left(unsigned(zext_ln1316_fu_140_p1),to_integer(unsigned('0' & zext_ln1320_fu_143_p1(31-1 downto 0)))));
    tmp_fu_153_p4 <= filled_fu_62(5 downto 3);
    zext_ln1316_fu_140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_reg_285),32));
    zext_ln1320_fu_143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(filled_fu_62),32));
end behav;
