// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module xf_cv_subtract_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        imgOutput_data_dout,
        imgOutput_data_num_data_valid,
        imgOutput_data_fifo_cap,
        imgOutput_data_empty_n,
        imgOutput_data_read,
        ldata_din,
        ldata_num_data_valid,
        ldata_fifo_cap,
        ldata_full_n,
        ldata_write,
        localbuffer_1_out,
        localbuffer_1_out_ap_vld,
        filled_1_out,
        filled_1_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] imgOutput_data_dout;
input  [2:0] imgOutput_data_num_data_valid;
input  [2:0] imgOutput_data_fifo_cap;
input   imgOutput_data_empty_n;
output   imgOutput_data_read;
output  [31:0] ldata_din;
input  [2:0] ldata_num_data_valid;
input  [2:0] ldata_fifo_cap;
input   ldata_full_n;
output   ldata_write;
output  [31:0] localbuffer_1_out;
output   localbuffer_1_out_ap_vld;
output  [5:0] filled_1_out;
output   filled_1_out_ap_vld;

reg ap_idle;
reg localbuffer_1_out_ap_vld;
reg filled_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg   [0:0] icmp_ln1301_reg_281;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln1324_reg_301;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1301_fu_119_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    imgOutput_data_blk_n;
wire    ap_block_pp0_stage0;
reg    ldata_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln1301_reg_281_pp0_iter1_reg;
reg   [23:0] val_reg_285;
wire   [31:0] zext_ln1316_fu_140_p1;
reg   [31:0] zext_ln1316_reg_290;
wire   [31:0] tempval_fu_147_p2;
reg   [31:0] tempval_reg_296;
wire   [0:0] icmp_ln1324_fu_163_p2;
wire  signed [5:0] sub_ln1332_fu_169_p2;
reg  signed [5:0] sub_ln1332_reg_305;
reg   [0:0] tmp_6_reg_310;
wire   [5:0] sub_ln1332_1_fu_183_p2;
reg   [5:0] sub_ln1332_1_reg_315;
reg    ap_condition_exit_pp0_iter2_stage0;
reg   [5:0] filled_fu_62;
wire   [5:0] add_ln1333_fu_189_p2;
wire   [5:0] add_ln1325_fu_200_p2;
wire    ap_loop_init;
reg   [31:0] localbuffer_fu_66;
wire   [31:0] localbuffer_2_fu_236_p3;
wire   [31:0] localbuffer_1_fu_214_p2;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [20:0] indvar_flatten_fu_70;
wire   [20:0] add_ln1301_fu_125_p2;
reg   [20:0] ap_sig_allocacmp_indvar_flatten_load;
reg    imgOutput_data_read_local;
reg    ap_block_pp0_stage0_01001;
reg    ldata_write_local;
wire   [31:0] zext_ln1320_fu_143_p1;
wire   [2:0] tmp_fu_153_p4;
wire  signed [31:0] sext_ln1332_1_fu_223_p1;
wire  signed [31:0] sext_ln1332_fu_220_p1;
wire   [31:0] shl_ln1332_fu_226_p2;
wire   [31:0] lshr_ln1332_fu_231_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_298;
reg    ap_condition_302;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 filled_fu_62 = 6'd0;
#0 localbuffer_fu_66 = 32'd0;
#0 indvar_flatten_fu_70 = 21'd0;
#0 ap_done_reg = 1'b0;
end

xf_cv_subtract_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            filled_fu_62 <= 6'd0;
        end else if ((1'b1 == ap_condition_302)) begin
            filled_fu_62 <= add_ln1325_fu_200_p2;
        end else if ((1'b1 == ap_condition_298)) begin
            filled_fu_62 <= add_ln1333_fu_189_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1301_fu_119_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_70 <= add_ln1301_fu_125_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_70 <= 21'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            localbuffer_fu_66 <= 32'd0;
        end else if (((icmp_ln1324_reg_301 == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            localbuffer_fu_66 <= localbuffer_1_fu_214_p2;
        end else if (((icmp_ln1324_reg_301 == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            localbuffer_fu_66 <= localbuffer_2_fu_236_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln1301_reg_281 <= icmp_ln1301_fu_119_p2;
        icmp_ln1301_reg_281_pp0_iter1_reg <= icmp_ln1301_reg_281;
        val_reg_285 <= imgOutput_data_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln1324_reg_301 <= icmp_ln1324_fu_163_p2;
        sub_ln1332_1_reg_315 <= sub_ln1332_1_fu_183_p2;
        sub_ln1332_reg_305 <= sub_ln1332_fu_169_p2;
        tempval_reg_296 <= tempval_fu_147_p2;
        tmp_6_reg_310 <= sub_ln1332_fu_169_p2[32'd5];
        zext_ln1316_reg_290[23 : 0] <= zext_ln1316_fu_140_p1[23 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln1301_fu_119_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1301_reg_281_pp0_iter1_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 21'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (icmp_ln1301_reg_281_pp0_iter1_reg == 1'd1))) begin
        filled_1_out_ap_vld = 1'b1;
    end else begin
        filled_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln1301_reg_281 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgOutput_data_blk_n = imgOutput_data_empty_n;
    end else begin
        imgOutput_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1301_reg_281 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgOutput_data_read_local = 1'b1;
    end else begin
        imgOutput_data_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln1324_reg_301 == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ldata_blk_n = ldata_full_n;
    end else begin
        ldata_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1324_reg_301 == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ldata_write_local = 1'b1;
    end else begin
        ldata_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (icmp_ln1301_reg_281_pp0_iter1_reg == 1'd1))) begin
        localbuffer_1_out_ap_vld = 1'b1;
    end else begin
        localbuffer_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1301_fu_125_p2 = (ap_sig_allocacmp_indvar_flatten_load + 21'd1);

assign add_ln1325_fu_200_p2 = (filled_fu_62 + 6'd24);

assign add_ln1333_fu_189_p2 = ($signed(filled_fu_62) + $signed(6'd56));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln1301_reg_281 == 1'd0) & (imgOutput_data_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((icmp_ln1324_reg_301 == 1'd0) & (ldata_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_298 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1324_fu_163_p2 == 1'd0) & (icmp_ln1301_reg_281_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_condition_302 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1324_fu_163_p2 == 1'd1) & (icmp_ln1301_reg_281_pp0_iter1_reg == 1'd0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign filled_1_out = filled_fu_62;

assign icmp_ln1301_fu_119_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 21'd2073600) ? 1'b1 : 1'b0);

assign icmp_ln1324_fu_163_p2 = ((tmp_fu_153_p4 == 3'd0) ? 1'b1 : 1'b0);

assign imgOutput_data_read = imgOutput_data_read_local;

assign ldata_din = localbuffer_1_fu_214_p2;

assign ldata_write = ldata_write_local;

assign localbuffer_1_fu_214_p2 = (tempval_reg_296 | localbuffer_fu_66);

assign localbuffer_1_out = localbuffer_fu_66;

assign localbuffer_2_fu_236_p3 = ((tmp_6_reg_310[0:0] == 1'b1) ? shl_ln1332_fu_226_p2 : lshr_ln1332_fu_231_p2);

assign lshr_ln1332_fu_231_p2 = zext_ln1316_reg_290 >> sext_ln1332_fu_220_p1;

assign sext_ln1332_1_fu_223_p1 = $signed(sub_ln1332_1_reg_315);

assign sext_ln1332_fu_220_p1 = sub_ln1332_reg_305;

assign shl_ln1332_fu_226_p2 = zext_ln1316_reg_290 << sext_ln1332_1_fu_223_p1;

assign sub_ln1332_1_fu_183_p2 = ($signed(6'd0) - $signed(sub_ln1332_fu_169_p2));

assign sub_ln1332_fu_169_p2 = ($signed(6'd32) - $signed(filled_fu_62));

assign tempval_fu_147_p2 = zext_ln1316_fu_140_p1 << zext_ln1320_fu_143_p1;

assign tmp_fu_153_p4 = {{filled_fu_62[5:3]}};

assign zext_ln1316_fu_140_p1 = val_reg_285;

assign zext_ln1320_fu_143_p1 = filled_fu_62;

always @ (posedge ap_clk) begin
    zext_ln1316_reg_290[31:24] <= 8'b00000000;
end

endmodule //xf_cv_subtract_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol
