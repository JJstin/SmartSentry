// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module xf_cv_subtract_MatStream2AxiStream_2_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        imgOutput_data_dout,
        imgOutput_data_num_data_valid,
        imgOutput_data_fifo_cap,
        imgOutput_data_empty_n,
        imgOutput_data_read,
        ldata_din,
        ldata_num_data_valid,
        ldata_fifo_cap,
        ldata_full_n,
        ldata_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] imgOutput_data_dout;
input  [2:0] imgOutput_data_num_data_valid;
input  [2:0] imgOutput_data_fifo_cap;
input   imgOutput_data_empty_n;
output   imgOutput_data_read;
output  [31:0] ldata_din;
input  [2:0] ldata_num_data_valid;
input  [2:0] ldata_fifo_cap;
input   ldata_full_n;
output   ldata_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg imgOutput_data_read;
reg[31:0] ldata_din;
reg ldata_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ldata_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln1340_fu_56_p2;
wire    grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_ap_start;
wire    grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_ap_done;
wire    grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_ap_idle;
wire    grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_ap_ready;
wire    grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_imgOutput_data_read;
wire   [31:0] grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_ldata_din;
wire    grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_ldata_write;
wire   [31:0] grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_localbuffer_1_out;
wire    grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_localbuffer_1_out_ap_vld;
wire   [5:0] grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_filled_1_out;
wire    grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_filled_1_out_ap_vld;
reg    grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_ap_start_reg;
reg    ap_block_state1_ignore_call5;
wire    ap_CS_fsm_state2;
reg    ap_block_state3;
reg    ldata_write_local;
reg   [2:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_ap_start_reg = 1'b0;
end

xf_cv_subtract_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_ap_start),
    .ap_done(grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_ap_done),
    .ap_idle(grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_ap_idle),
    .ap_ready(grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_ap_ready),
    .imgOutput_data_dout(imgOutput_data_dout),
    .imgOutput_data_num_data_valid(3'd0),
    .imgOutput_data_fifo_cap(3'd0),
    .imgOutput_data_empty_n(imgOutput_data_empty_n),
    .imgOutput_data_read(grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_imgOutput_data_read),
    .ldata_din(grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_ldata_din),
    .ldata_num_data_valid(3'd0),
    .ldata_fifo_cap(3'd0),
    .ldata_full_n(ldata_full_n),
    .ldata_write(grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_ldata_write),
    .localbuffer_1_out(grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_localbuffer_1_out),
    .localbuffer_1_out_ap_vld(grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_localbuffer_1_out_ap_vld),
    .filled_1_out(grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_filled_1_out),
    .filled_1_out_ap_vld(grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_filled_1_out_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state3) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state1_ignore_call5) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_ap_start_reg <= 1'b1;
        end else if ((grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_ap_ready == 1'b1)) begin
            grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state3)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        imgOutput_data_read = grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_imgOutput_data_read;
    end else begin
        imgOutput_data_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1340_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ldata_blk_n = ldata_full_n;
    end else begin
        ldata_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ldata_din = grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_ldata_din;
    end else begin
        ldata_din = grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_localbuffer_1_out;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ldata_write = grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_ldata_write;
    end else begin
        ldata_write = ldata_write_local;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3) & (icmp_ln1340_fu_56_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ldata_write_local = 1'b1;
    end else begin
        ldata_write_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call5 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3 = ((icmp_ln1340_fu_56_p2 == 1'd0) & (ldata_full_n == 1'b0));
end

assign grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_ap_start = grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_ap_start_reg;

assign icmp_ln1340_fu_56_p2 = ((grp_MatStream2AxiStream_2_Pipeline_MMIterOutRow_MMIterOutCol_fu_39_filled_1_out == 6'd0) ? 1'b1 : 1'b0);

endmodule //xf_cv_subtract_MatStream2AxiStream_2_s
