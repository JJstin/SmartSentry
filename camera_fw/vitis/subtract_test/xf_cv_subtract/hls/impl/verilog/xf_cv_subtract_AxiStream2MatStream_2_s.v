// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module xf_cv_subtract_AxiStream2MatStream_2_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ldata_dout,
        ldata_num_data_valid,
        ldata_fifo_cap,
        ldata_empty_n,
        ldata_read,
        imgInput1_data_din,
        imgInput1_data_num_data_valid,
        imgInput1_data_fifo_cap,
        imgInput1_data_full_n,
        imgInput1_data_write
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] ldata_dout;
input  [2:0] ldata_num_data_valid;
input  [2:0] ldata_fifo_cap;
input   ldata_empty_n;
output   ldata_read;
output  [23:0] imgInput1_data_din;
input  [2:0] imgInput1_data_num_data_valid;
input  [2:0] imgInput1_data_fifo_cap;
input   imgInput1_data_full_n;
output   imgInput1_data_write;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
reg   [0:0] icmp_ln1054_reg_485;
reg   [0:0] icmp_ln1065_reg_489;
reg    ap_predicate_op47_read_state2;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_subdone;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ldata_blk_n;
wire    ap_block_pp0_stage1;
reg    imgInput1_data_blk_n;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln1084_reg_587;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] rem_1_reg_477;
wire   [0:0] icmp_ln1054_fu_131_p2;
reg   [0:0] icmp_ln1054_reg_485_pp0_iter1_reg;
wire   [0:0] icmp_ln1065_fu_143_p2;
reg   [0:0] icmp_ln1065_reg_489_pp0_iter1_reg;
wire   [0:0] icmp_ln1074_fu_161_p2;
reg   [0:0] icmp_ln1074_reg_493;
reg   [0:0] icmp_ln1074_reg_493_pp0_iter1_reg;
wire   [4:0] trunc_ln1074_fu_167_p1;
reg   [4:0] trunc_ln1074_reg_500;
reg   [4:0] trunc_ln1074_reg_500_pp0_iter1_reg;
wire   [4:0] trunc_ln1074_1_fu_171_p1;
reg   [4:0] trunc_ln1074_1_reg_508;
reg   [4:0] trunc_ln1074_1_reg_508_pp0_iter1_reg;
wire   [23:0] trunc_ln1074_2_fu_221_p1;
reg   [23:0] trunc_ln1074_2_reg_514;
reg    ap_block_pp0_stage1_11001;
wire   [0:0] icmp_ln1066_fu_235_p2;
reg   [0:0] icmp_ln1066_reg_519;
wire   [4:0] trunc_ln1067_fu_240_p1;
reg   [4:0] trunc_ln1067_reg_524;
wire   [31:0] zext_ln1067_fu_249_p1;
reg   [31:0] zext_ln1067_reg_531;
wire   [31:0] lshr_ln1067_fu_253_p2;
reg   [31:0] lshr_ln1067_reg_536;
reg   [31:0] val_1_reg_541;
wire   [31:0] lshr_ln1067_1_fu_274_p2;
reg   [31:0] lshr_ln1067_1_reg_546;
wire   [23:0] lshr_ln1067_2_fu_288_p2;
reg   [23:0] lshr_ln1067_2_reg_551;
wire   [31:0] lshr_ln1071_fu_303_p2;
reg   [31:0] lshr_ln1071_reg_556;
wire   [23:0] zext_ln1071_1_fu_309_p1;
reg   [23:0] zext_ln1071_1_reg_561;
wire   [23:0] shl_ln1071_fu_312_p2;
reg   [23:0] shl_ln1071_reg_566;
reg   [31:0] j_3_reg_571;
wire   [23:0] localbuffer_5_fu_356_p2;
wire   [23:0] localbuffer_4_fu_413_p2;
wire   [0:0] icmp_ln1084_fu_419_p2;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_condition_exit_pp0_iter1_stage1;
reg    ap_block_pp0_stage0_subdone;
wire   [23:0] ap_phi_reg_pp0_iter0_localbuffer2_reg_95;
reg   [23:0] ap_phi_reg_pp0_iter1_localbuffer2_reg_95;
reg   [23:0] ap_phi_reg_pp0_iter2_localbuffer2_reg_95;
reg   [31:0] rem_fu_66;
wire   [31:0] rem_3_fu_225_p2;
wire   [31:0] rem_2_fu_259_p2;
wire    ap_loop_init;
reg   [31:0] ap_sig_allocacmp_rem_1;
reg   [20:0] i_fu_70;
wire   [20:0] i_4_fu_137_p2;
reg   [20:0] ap_sig_allocacmp_i_3;
reg   [31:0] j_fu_74;
wire   [31:0] j_4_fu_435_p3;
reg   [31:0] val_fu_78;
reg    ldata_read_local;
reg    ap_block_pp0_stage0_01001;
reg    imgInput1_data_write_local;
wire   [31:0] sub_ln1074_1_fu_155_p2;
wire   [31:0] sub_ln1074_fu_149_p2;
reg   [31:0] tmp_fu_183_p4;
wire   [4:0] xor_ln1074_fu_193_p2;
wire   [4:0] select_ln1074_2_fu_205_p3;
wire   [31:0] select_ln1074_1_fu_198_p3;
wire   [31:0] zext_ln1074_fu_211_p1;
wire   [31:0] lshr_ln1074_fu_215_p2;
wire   [4:0] sub_ln1067_fu_243_p2;
wire   [4:0] sub_ln1067_1_fu_279_p2;
wire   [23:0] zext_ln1067_1_fu_284_p1;
wire   [4:0] add_ln1071_fu_294_p2;
wire   [31:0] zext_ln1071_fu_299_p1;
wire   [4:0] sub_ln1074_2_fu_321_p2;
wire   [4:0] sub_ln1074_3_fu_325_p2;
wire   [4:0] select_ln1074_fu_329_p3;
wire   [4:0] xor_ln1074_1_fu_336_p2;
wire   [31:0] zext_ln1074_1_fu_342_p1;
wire   [31:0] lshr_ln1074_1_fu_346_p2;
wire   [23:0] trunc_ln1074_3_fu_352_p1;
wire   [23:0] trunc_ln1067_1_fu_361_p1;
wire   [23:0] trunc_ln1067_2_fu_364_p1;
wire   [23:0] and_ln1067_fu_367_p2;
wire   [23:0] localbuffer_fu_373_p2;
wire   [23:0] trunc_ln1049_fu_385_p1;
wire   [23:0] trunc_ln1071_fu_388_p1;
wire   [23:0] localbuffer_3_fu_378_p3;
wire   [23:0] xor_ln1071_fu_397_p2;
wire   [23:0] and_ln1071_fu_391_p2;
wire   [23:0] and_ln1071_1_fu_402_p2;
wire   [23:0] shl_ln1071_1_fu_408_p2;
wire   [0:0] bLast_fu_425_p2;
wire   [31:0] add_ln1086_fu_430_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to2;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_191;
reg    ap_condition_212;
reg    ap_condition_508;
reg    ap_condition_513;
reg    ap_condition_517;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 rem_fu_66 = 32'd0;
#0 i_fu_70 = 21'd0;
#0 j_fu_74 = 32'd0;
#0 val_fu_78 = 32'd0;
end

xf_cv_subtract_flow_control_loop_delay_pipe flow_control_loop_delay_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue),
    .ap_loop_exit_ready_delayed(ap_loop_exit_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_exit_pp0_iter1_stage1) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_191)) begin
        if (((icmp_ln1065_reg_489_pp0_iter1_reg == 1'd0) & (icmp_ln1054_reg_485_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter2_localbuffer2_reg_95 <= localbuffer_5_fu_356_p2;
        end else if (((icmp_ln1065_reg_489_pp0_iter1_reg == 1'd1) & (icmp_ln1054_reg_485_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter2_localbuffer2_reg_95 <= localbuffer_4_fu_413_p2;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_localbuffer2_reg_95 <= ap_phi_reg_pp0_iter1_localbuffer2_reg_95;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_212)) begin
        if ((icmp_ln1054_fu_131_p2 == 1'd0)) begin
            i_fu_70 <= i_4_fu_137_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_70 <= 21'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1))) begin
            j_fu_74 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            j_fu_74 <= j_4_fu_435_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_517)) begin
            rem_fu_66 <= 32'd0;
        end else if ((1'b1 == ap_condition_513)) begin
            rem_fu_66 <= rem_2_fu_259_p2;
        end else if ((1'b1 == ap_condition_508)) begin
            rem_fu_66 <= rem_3_fu_225_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_517)) begin
            val_fu_78 <= 32'd0;
        end else if ((1'b1 == ap_condition_513)) begin
            val_fu_78 <= ldata_dout;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln1066_reg_519 <= icmp_ln1066_fu_235_p2;
        icmp_ln1084_reg_587 <= icmp_ln1084_fu_419_p2;
        j_3_reg_571 <= j_fu_74;
        lshr_ln1067_reg_536 <= lshr_ln1067_fu_253_p2;
        trunc_ln1067_reg_524 <= trunc_ln1067_fu_240_p1;
        trunc_ln1074_2_reg_514 <= trunc_ln1074_2_fu_221_p1;
        val_1_reg_541 <= ldata_dout;
        zext_ln1067_reg_531[4 : 0] <= zext_ln1067_fu_249_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_reg_pp0_iter1_localbuffer2_reg_95 <= ap_phi_reg_pp0_iter0_localbuffer2_reg_95;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1054_reg_485 <= icmp_ln1054_fu_131_p2;
        icmp_ln1054_reg_485_pp0_iter1_reg <= icmp_ln1054_reg_485;
        icmp_ln1065_reg_489 <= icmp_ln1065_fu_143_p2;
        icmp_ln1065_reg_489_pp0_iter1_reg <= icmp_ln1065_reg_489;
        icmp_ln1074_reg_493 <= icmp_ln1074_fu_161_p2;
        icmp_ln1074_reg_493_pp0_iter1_reg <= icmp_ln1074_reg_493;
        lshr_ln1067_1_reg_546 <= lshr_ln1067_1_fu_274_p2;
        lshr_ln1067_2_reg_551 <= lshr_ln1067_2_fu_288_p2;
        lshr_ln1071_reg_556 <= lshr_ln1071_fu_303_p2;
        rem_1_reg_477 <= ap_sig_allocacmp_rem_1;
        shl_ln1071_reg_566 <= shl_ln1071_fu_312_p2;
        trunc_ln1074_1_reg_508 <= trunc_ln1074_1_fu_171_p1;
        trunc_ln1074_1_reg_508_pp0_iter1_reg <= trunc_ln1074_1_reg_508;
        trunc_ln1074_reg_500 <= trunc_ln1074_fu_167_p1;
        trunc_ln1074_reg_500_pp0_iter1_reg <= trunc_ln1074_reg_500;
        zext_ln1071_1_reg_561[4 : 0] <= zext_ln1071_1_fu_309_p1[4 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (icmp_ln1054_reg_485 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln1054_reg_485_pp0_iter1_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter1_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_done_int = 1'b1;
    end else begin
        ap_loop_exit_done_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_3 = 21'd0;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_rem_1 = 32'd0;
    end else begin
        ap_sig_allocacmp_rem_1 = rem_fu_66;
    end
end

always @ (*) begin
    if (((icmp_ln1084_reg_587 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgInput1_data_blk_n = imgInput1_data_full_n;
    end else begin
        imgInput1_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1084_reg_587 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgInput1_data_write_local = 1'b1;
    end else begin
        imgInput1_data_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_predicate_op47_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ldata_blk_n = ldata_empty_n;
    end else begin
        ldata_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op47_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ldata_read_local = 1'b1;
    end else begin
        ldata_read_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1071_fu_294_p2 = (trunc_ln1067_reg_524 + 5'd8);

assign add_ln1086_fu_430_p2 = (j_3_reg_571 + 32'd1);

assign and_ln1067_fu_367_p2 = (trunc_ln1067_2_fu_364_p1 & trunc_ln1067_1_fu_361_p1);

assign and_ln1071_1_fu_402_p2 = (xor_ln1071_fu_397_p2 & localbuffer_3_fu_378_p3);

assign and_ln1071_fu_391_p2 = (trunc_ln1071_fu_388_p1 & trunc_ln1049_fu_385_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = ((ap_predicate_op47_read_state2 == 1'b1) & (ldata_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter2 = ((icmp_ln1084_reg_587 == 1'd1) & (imgInput1_data_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_191 = ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_212 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_508 = ((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln1065_reg_489 == 1'd0) & (icmp_ln1054_reg_485 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_513 = ((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln1065_reg_489 == 1'd1) & (icmp_ln1054_reg_485 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_517 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_phi_reg_pp0_iter0_localbuffer2_reg_95 = 'bx;

always @ (*) begin
    ap_predicate_op47_read_state2 = ((icmp_ln1065_reg_489 == 1'd1) & (icmp_ln1054_reg_485 == 1'd0));
end

assign ap_ready = ap_ready_sig;

assign bLast_fu_425_p2 = ((j_3_reg_571 == 32'd1079) ? 1'b1 : 1'b0);

assign i_4_fu_137_p2 = (ap_sig_allocacmp_i_3 + 21'd1);

assign icmp_ln1054_fu_131_p2 = ((ap_sig_allocacmp_i_3 == 21'd2073600) ? 1'b1 : 1'b0);

assign icmp_ln1065_fu_143_p2 = (($signed(ap_sig_allocacmp_rem_1) < $signed(32'd24)) ? 1'b1 : 1'b0);

assign icmp_ln1066_fu_235_p2 = ((rem_1_reg_477 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1074_fu_161_p2 = ((sub_ln1074_1_fu_155_p2 > sub_ln1074_fu_149_p2) ? 1'b1 : 1'b0);

assign icmp_ln1084_fu_419_p2 = (($signed(j_fu_74) < $signed(32'd1080)) ? 1'b1 : 1'b0);

assign imgInput1_data_din = ap_phi_reg_pp0_iter2_localbuffer2_reg_95;

assign imgInput1_data_write = imgInput1_data_write_local;

assign j_4_fu_435_p3 = ((bLast_fu_425_p2[0:0] == 1'b1) ? 32'd0 : add_ln1086_fu_430_p2);

assign ldata_read = ldata_read_local;

assign localbuffer_3_fu_378_p3 = ((icmp_ln1066_reg_519[0:0] == 1'b1) ? 24'd0 : localbuffer_fu_373_p2);

assign localbuffer_4_fu_413_p2 = (shl_ln1071_1_fu_408_p2 | and_ln1071_1_fu_402_p2);

assign localbuffer_5_fu_356_p2 = (trunc_ln1074_3_fu_352_p1 & trunc_ln1074_2_reg_514);

assign localbuffer_fu_373_p2 = (lshr_ln1067_2_reg_551 & and_ln1067_fu_367_p2);

assign lshr_ln1067_1_fu_274_p2 = 32'd4294967295 >> zext_ln1067_reg_531;

assign lshr_ln1067_2_fu_288_p2 = 24'd16777215 >> zext_ln1067_1_fu_284_p1;

assign lshr_ln1067_fu_253_p2 = val_fu_78 >> zext_ln1067_fu_249_p1;

assign lshr_ln1071_fu_303_p2 = 32'd4294967295 >> zext_ln1071_fu_299_p1;

assign lshr_ln1074_1_fu_346_p2 = 32'd4294967295 >> zext_ln1074_1_fu_342_p1;

assign lshr_ln1074_fu_215_p2 = select_ln1074_1_fu_198_p3 >> zext_ln1074_fu_211_p1;

assign rem_2_fu_259_p2 = (rem_1_reg_477 + 32'd8);

assign rem_3_fu_225_p2 = ($signed(rem_1_reg_477) + $signed(32'd4294967272));

assign select_ln1074_1_fu_198_p3 = ((icmp_ln1074_reg_493[0:0] == 1'b1) ? tmp_fu_183_p4 : val_fu_78);

assign select_ln1074_2_fu_205_p3 = ((icmp_ln1074_reg_493[0:0] == 1'b1) ? xor_ln1074_fu_193_p2 : trunc_ln1074_reg_500);

assign select_ln1074_fu_329_p3 = ((icmp_ln1074_reg_493_pp0_iter1_reg[0:0] == 1'b1) ? sub_ln1074_2_fu_321_p2 : sub_ln1074_3_fu_325_p2);

assign shl_ln1071_1_fu_408_p2 = and_ln1071_fu_391_p2 << zext_ln1071_1_reg_561;

assign shl_ln1071_fu_312_p2 = 24'd16777215 << zext_ln1071_1_fu_309_p1;

assign sub_ln1067_1_fu_279_p2 = ($signed(5'd24) - $signed(trunc_ln1067_reg_524));

assign sub_ln1067_fu_243_p2 = (5'd0 - trunc_ln1067_fu_240_p1);

assign sub_ln1074_1_fu_155_p2 = (32'd32 - ap_sig_allocacmp_rem_1);

assign sub_ln1074_2_fu_321_p2 = (trunc_ln1074_reg_500_pp0_iter1_reg - trunc_ln1074_1_reg_508_pp0_iter1_reg);

assign sub_ln1074_3_fu_325_p2 = (trunc_ln1074_1_reg_508_pp0_iter1_reg - trunc_ln1074_reg_500_pp0_iter1_reg);

assign sub_ln1074_fu_149_p2 = (32'd55 - ap_sig_allocacmp_rem_1);

integer ap_tvar_int_0;

always @ (val_fu_78) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            tmp_fu_183_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_fu_183_p4[ap_tvar_int_0] = val_fu_78[31 - ap_tvar_int_0];
        end
    end
end

assign trunc_ln1049_fu_385_p1 = val_1_reg_541[23:0];

assign trunc_ln1067_1_fu_361_p1 = lshr_ln1067_reg_536[23:0];

assign trunc_ln1067_2_fu_364_p1 = lshr_ln1067_1_reg_546[23:0];

assign trunc_ln1067_fu_240_p1 = rem_1_reg_477[4:0];

assign trunc_ln1071_fu_388_p1 = lshr_ln1071_reg_556[23:0];

assign trunc_ln1074_1_fu_171_p1 = sub_ln1074_fu_149_p2[4:0];

assign trunc_ln1074_2_fu_221_p1 = lshr_ln1074_fu_215_p2[23:0];

assign trunc_ln1074_3_fu_352_p1 = lshr_ln1074_1_fu_346_p2[23:0];

assign trunc_ln1074_fu_167_p1 = sub_ln1074_1_fu_155_p2[4:0];

assign xor_ln1071_fu_397_p2 = (shl_ln1071_reg_566 ^ 24'd16777215);

assign xor_ln1074_1_fu_336_p2 = (select_ln1074_fu_329_p3 ^ 5'd31);

assign xor_ln1074_fu_193_p2 = (trunc_ln1074_reg_500 ^ 5'd31);

assign zext_ln1067_1_fu_284_p1 = sub_ln1067_1_fu_279_p2;

assign zext_ln1067_fu_249_p1 = sub_ln1067_fu_243_p2;

assign zext_ln1071_1_fu_309_p1 = trunc_ln1067_reg_524;

assign zext_ln1071_fu_299_p1 = add_ln1071_fu_294_p2;

assign zext_ln1074_1_fu_342_p1 = xor_ln1074_1_fu_336_p2;

assign zext_ln1074_fu_211_p1 = select_ln1074_2_fu_205_p3;

always @ (posedge ap_clk) begin
    zext_ln1067_reg_531[31:5] <= 27'b000000000000000000000000000;
    zext_ln1071_1_reg_561[23:5] <= 19'b0000000000000000000;
end

endmodule //xf_cv_subtract_AxiStream2MatStream_2_s
