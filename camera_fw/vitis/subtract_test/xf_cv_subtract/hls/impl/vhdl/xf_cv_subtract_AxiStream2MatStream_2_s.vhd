-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity xf_cv_subtract_AxiStream2MatStream_2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ldata_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ldata_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    ldata_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    ldata_empty_n : IN STD_LOGIC;
    ldata_read : OUT STD_LOGIC;
    imgInput1_data_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    imgInput1_data_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    imgInput1_data_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    imgInput1_data_full_n : IN STD_LOGIC;
    imgInput1_data_write : OUT STD_LOGIC );
end;


architecture behav of xf_cv_subtract_AxiStream2MatStream_2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv21_1FA400 : STD_LOGIC_VECTOR (20 downto 0) := "111111010010000000000";
    constant ap_const_lv21_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_438 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000111000";
    constant ap_const_lv32_437 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000110111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal icmp_ln1054_reg_485 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_reg_489 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op47_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ldata_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal imgInput1_data_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln1084_reg_587 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal rem_1_reg_477 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1054_fu_131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1054_reg_485_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_fu_143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_reg_489_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1074_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1074_reg_493 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1074_reg_493_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1074_fu_167_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1074_reg_500 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1074_reg_500_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1074_1_fu_171_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1074_1_reg_508 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1074_1_reg_508_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1074_2_fu_221_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln1074_2_reg_514 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln1066_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1066_reg_519 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1067_fu_240_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1067_reg_524 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1067_fu_249_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1067_reg_531 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1067_fu_253_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1067_reg_536 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_1_reg_541 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1067_1_fu_274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1067_1_reg_546 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1067_2_fu_288_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln1067_2_reg_551 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln1071_fu_303_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1071_reg_556 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1071_1_fu_309_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln1071_1_reg_561 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1071_fu_312_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1071_reg_566 : STD_LOGIC_VECTOR (23 downto 0);
    signal j_3_reg_571 : STD_LOGIC_VECTOR (31 downto 0);
    signal localbuffer_5_fu_356_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal localbuffer_4_fu_413_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln1084_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_condition_exit_pp0_iter1_stage1 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_reg_pp0_iter0_localbuffer2_reg_95 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_phi_reg_pp0_iter1_localbuffer2_reg_95 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_phi_reg_pp0_iter2_localbuffer2_reg_95 : STD_LOGIC_VECTOR (23 downto 0);
    signal rem_fu_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal rem_3_fu_225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rem_2_fu_259_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_rem_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_70 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    signal i_4_fu_137_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_sig_allocacmp_i_3 : STD_LOGIC_VECTOR (20 downto 0);
    signal j_fu_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal j_4_fu_435_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_fu_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ldata_read_local : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal imgInput1_data_write_local : STD_LOGIC;
    signal sub_ln1074_1_fu_155_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1074_fu_149_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_183_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln1074_fu_193_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln1074_2_fu_205_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln1074_1_fu_198_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1074_fu_211_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1074_fu_215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1067_fu_243_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln1067_1_fu_279_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1067_1_fu_284_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1071_fu_294_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1071_fu_299_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1074_2_fu_321_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln1074_3_fu_325_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln1074_fu_329_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln1074_1_fu_336_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1074_1_fu_342_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1074_1_fu_346_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1074_3_fu_352_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln1067_1_fu_361_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln1067_2_fu_364_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln1067_fu_367_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal localbuffer_fu_373_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln1049_fu_385_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln1071_fu_388_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal localbuffer_3_fu_378_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln1071_fu_397_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln1071_fu_391_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln1071_1_fu_402_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1071_1_fu_408_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal bLast_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1086_fu_430_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_191 : BOOLEAN;
    signal ap_condition_212 : BOOLEAN;
    signal ap_condition_508 : BOOLEAN;
    signal ap_condition_513 : BOOLEAN;
    signal ap_condition_517 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component xf_cv_subtract_flow_control_loop_delay_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_loop_exit_ready_delayed : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_delay_pipe_U : component xf_cv_subtract_flow_control_loop_delay_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue,
        ap_loop_exit_ready_delayed => ap_loop_exit_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage1) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter2_localbuffer2_reg_95_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_191)) then
                if (((icmp_ln1065_reg_489_pp0_iter1_reg = ap_const_lv1_0) and (icmp_ln1054_reg_485_pp0_iter1_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_localbuffer2_reg_95 <= localbuffer_5_fu_356_p2;
                elsif (((icmp_ln1065_reg_489_pp0_iter1_reg = ap_const_lv1_1) and (icmp_ln1054_reg_485_pp0_iter1_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_localbuffer2_reg_95 <= localbuffer_4_fu_413_p2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_localbuffer2_reg_95 <= ap_phi_reg_pp0_iter1_localbuffer2_reg_95;
                end if;
            end if; 
        end if;
    end process;

    i_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_212)) then
                if ((icmp_ln1054_fu_131_p2 = ap_const_lv1_0)) then 
                    i_fu_70 <= i_4_fu_137_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_70 <= ap_const_lv21_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    j_fu_74 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    j_fu_74 <= j_4_fu_435_p3;
                end if;
            end if; 
        end if;
    end process;

    rem_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_517)) then 
                    rem_fu_66 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_513)) then 
                    rem_fu_66 <= rem_2_fu_259_p2;
                elsif ((ap_const_boolean_1 = ap_condition_508)) then 
                    rem_fu_66 <= rem_3_fu_225_p2;
                end if;
            end if; 
        end if;
    end process;

    val_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_517)) then 
                    val_fu_78 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_513)) then 
                    val_fu_78 <= ldata_dout;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln1066_reg_519 <= icmp_ln1066_fu_235_p2;
                icmp_ln1084_reg_587 <= icmp_ln1084_fu_419_p2;
                j_3_reg_571 <= j_fu_74;
                lshr_ln1067_reg_536 <= lshr_ln1067_fu_253_p2;
                trunc_ln1067_reg_524 <= trunc_ln1067_fu_240_p1;
                trunc_ln1074_2_reg_514 <= trunc_ln1074_2_fu_221_p1;
                val_1_reg_541 <= ldata_dout;
                    zext_ln1067_reg_531(4 downto 0) <= zext_ln1067_fu_249_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter1_localbuffer2_reg_95 <= ap_phi_reg_pp0_iter0_localbuffer2_reg_95;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1054_reg_485 <= icmp_ln1054_fu_131_p2;
                icmp_ln1054_reg_485_pp0_iter1_reg <= icmp_ln1054_reg_485;
                icmp_ln1065_reg_489 <= icmp_ln1065_fu_143_p2;
                icmp_ln1065_reg_489_pp0_iter1_reg <= icmp_ln1065_reg_489;
                icmp_ln1074_reg_493 <= icmp_ln1074_fu_161_p2;
                icmp_ln1074_reg_493_pp0_iter1_reg <= icmp_ln1074_reg_493;
                lshr_ln1067_1_reg_546 <= lshr_ln1067_1_fu_274_p2;
                lshr_ln1067_2_reg_551 <= lshr_ln1067_2_fu_288_p2;
                lshr_ln1071_reg_556 <= lshr_ln1071_fu_303_p2;
                rem_1_reg_477 <= ap_sig_allocacmp_rem_1;
                shl_ln1071_reg_566 <= shl_ln1071_fu_312_p2;
                trunc_ln1074_1_reg_508 <= trunc_ln1074_1_fu_171_p1;
                trunc_ln1074_1_reg_508_pp0_iter1_reg <= trunc_ln1074_1_reg_508;
                trunc_ln1074_reg_500 <= trunc_ln1074_fu_167_p1;
                trunc_ln1074_reg_500_pp0_iter1_reg <= trunc_ln1074_reg_500;
                    zext_ln1071_1_reg_561(4 downto 0) <= zext_ln1071_1_fu_309_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln1067_reg_531(31 downto 5) <= "000000000000000000000000000";
    zext_ln1071_1_reg_561(23 downto 5) <= "0000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln1071_fu_294_p2 <= std_logic_vector(unsigned(trunc_ln1067_reg_524) + unsigned(ap_const_lv5_8));
    add_ln1086_fu_430_p2 <= std_logic_vector(unsigned(j_3_reg_571) + unsigned(ap_const_lv32_1));
    and_ln1067_fu_367_p2 <= (trunc_ln1067_2_fu_364_p1 and trunc_ln1067_1_fu_361_p1);
    and_ln1071_1_fu_402_p2 <= (xor_ln1071_fu_397_p2 and localbuffer_3_fu_378_p3);
    and_ln1071_fu_391_p2 <= (trunc_ln1071_fu_388_p1 and trunc_ln1049_fu_385_p1);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state5_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state5_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_block_state5_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state2_pp0_stage1_iter0)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state2_pp0_stage1_iter0)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage1_iter0_assign_proc : process(ldata_empty_n, ap_predicate_op47_read_state2)
    begin
                ap_block_state2_pp0_stage1_iter0 <= ((ap_predicate_op47_read_state2 = ap_const_boolean_1) and (ldata_empty_n = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage0_iter2_assign_proc : process(imgInput1_data_full_n, icmp_ln1084_reg_587)
    begin
                ap_block_state5_pp0_stage0_iter2 <= ((icmp_ln1084_reg_587 = ap_const_lv1_1) and (imgInput1_data_full_n = ap_const_logic_0));
    end process;


    ap_condition_191_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
                ap_condition_191 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_212_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_212 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_508_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln1054_reg_485, icmp_ln1065_reg_489, ap_block_pp0_stage1_11001)
    begin
                ap_condition_508 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln1065_reg_489 = ap_const_lv1_0) and (icmp_ln1054_reg_485 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_513_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln1054_reg_485, icmp_ln1065_reg_489, ap_block_pp0_stage1_11001)
    begin
                ap_condition_513 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln1065_reg_489 = ap_const_lv1_1) and (icmp_ln1054_reg_485 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_517_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
                ap_condition_517 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln1054_reg_485, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (icmp_ln1054_reg_485 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln1054_reg_485_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln1054_reg_485_pp0_iter1_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter1_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_loop_exit_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_loop_exit_done_int <= ap_const_logic_1;
        else 
            ap_loop_exit_done_int <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;
    ap_phi_reg_pp0_iter0_localbuffer2_reg_95 <= "XXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op47_read_state2_assign_proc : process(icmp_ln1054_reg_485, icmp_ln1065_reg_489)
    begin
                ap_predicate_op47_read_state2 <= ((icmp_ln1065_reg_489 = ap_const_lv1_1) and (icmp_ln1054_reg_485 = ap_const_lv1_0));
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, i_fu_70)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_3 <= ap_const_lv21_0;
        else 
            ap_sig_allocacmp_i_3 <= i_fu_70;
        end if; 
    end process;


    ap_sig_allocacmp_rem_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, rem_fu_66, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_rem_1 <= ap_const_lv32_0;
        else 
            ap_sig_allocacmp_rem_1 <= rem_fu_66;
        end if; 
    end process;

    bLast_fu_425_p2 <= "1" when (j_3_reg_571 = ap_const_lv32_437) else "0";
    i_4_fu_137_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_3) + unsigned(ap_const_lv21_1));
    icmp_ln1054_fu_131_p2 <= "1" when (ap_sig_allocacmp_i_3 = ap_const_lv21_1FA400) else "0";
    icmp_ln1065_fu_143_p2 <= "1" when (signed(ap_sig_allocacmp_rem_1) < signed(ap_const_lv32_18)) else "0";
    icmp_ln1066_fu_235_p2 <= "1" when (rem_1_reg_477 = ap_const_lv32_0) else "0";
    icmp_ln1074_fu_161_p2 <= "1" when (unsigned(sub_ln1074_1_fu_155_p2) > unsigned(sub_ln1074_fu_149_p2)) else "0";
    icmp_ln1084_fu_419_p2 <= "1" when (signed(j_fu_74) < signed(ap_const_lv32_438)) else "0";

    imgInput1_data_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, imgInput1_data_full_n, ap_block_pp0_stage0, icmp_ln1084_reg_587)
    begin
        if (((icmp_ln1084_reg_587 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgInput1_data_blk_n <= imgInput1_data_full_n;
        else 
            imgInput1_data_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    imgInput1_data_din <= ap_phi_reg_pp0_iter2_localbuffer2_reg_95;
    imgInput1_data_write <= imgInput1_data_write_local;

    imgInput1_data_write_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln1084_reg_587, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1084_reg_587 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgInput1_data_write_local <= ap_const_logic_1;
        else 
            imgInput1_data_write_local <= ap_const_logic_0;
        end if; 
    end process;

    j_4_fu_435_p3 <= 
        ap_const_lv32_0 when (bLast_fu_425_p2(0) = '1') else 
        add_ln1086_fu_430_p2;

    ldata_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ldata_empty_n, ap_predicate_op47_read_state2, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_predicate_op47_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ldata_blk_n <= ldata_empty_n;
        else 
            ldata_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ldata_read <= ldata_read_local;

    ldata_read_local_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_predicate_op47_read_state2, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_op47_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ldata_read_local <= ap_const_logic_1;
        else 
            ldata_read_local <= ap_const_logic_0;
        end if; 
    end process;

    localbuffer_3_fu_378_p3 <= 
        ap_const_lv24_0 when (icmp_ln1066_reg_519(0) = '1') else 
        localbuffer_fu_373_p2;
    localbuffer_4_fu_413_p2 <= (shl_ln1071_1_fu_408_p2 or and_ln1071_1_fu_402_p2);
    localbuffer_5_fu_356_p2 <= (trunc_ln1074_3_fu_352_p1 and trunc_ln1074_2_reg_514);
    localbuffer_fu_373_p2 <= (lshr_ln1067_2_reg_551 and and_ln1067_fu_367_p2);
    lshr_ln1067_1_fu_274_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln1067_reg_531(31-1 downto 0)))));
    lshr_ln1067_2_fu_288_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv24_FFFFFF),to_integer(unsigned('0' & zext_ln1067_1_fu_284_p1(24-1 downto 0)))));
    lshr_ln1067_fu_253_p2 <= std_logic_vector(shift_right(unsigned(val_fu_78),to_integer(unsigned('0' & zext_ln1067_fu_249_p1(31-1 downto 0)))));
    lshr_ln1071_fu_303_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln1071_fu_299_p1(31-1 downto 0)))));
    lshr_ln1074_1_fu_346_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln1074_1_fu_342_p1(31-1 downto 0)))));
    lshr_ln1074_fu_215_p2 <= std_logic_vector(shift_right(unsigned(select_ln1074_1_fu_198_p3),to_integer(unsigned('0' & zext_ln1074_fu_211_p1(31-1 downto 0)))));
    rem_2_fu_259_p2 <= std_logic_vector(unsigned(rem_1_reg_477) + unsigned(ap_const_lv32_8));
    rem_3_fu_225_p2 <= std_logic_vector(unsigned(rem_1_reg_477) + unsigned(ap_const_lv32_FFFFFFE8));
    select_ln1074_1_fu_198_p3 <= 
        tmp_fu_183_p4 when (icmp_ln1074_reg_493(0) = '1') else 
        val_fu_78;
    select_ln1074_2_fu_205_p3 <= 
        xor_ln1074_fu_193_p2 when (icmp_ln1074_reg_493(0) = '1') else 
        trunc_ln1074_reg_500;
    select_ln1074_fu_329_p3 <= 
        sub_ln1074_2_fu_321_p2 when (icmp_ln1074_reg_493_pp0_iter1_reg(0) = '1') else 
        sub_ln1074_3_fu_325_p2;
    shl_ln1071_1_fu_408_p2 <= std_logic_vector(shift_left(unsigned(and_ln1071_fu_391_p2),to_integer(unsigned('0' & zext_ln1071_1_reg_561(24-1 downto 0)))));
    shl_ln1071_fu_312_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv24_FFFFFF),to_integer(unsigned('0' & zext_ln1071_1_fu_309_p1(24-1 downto 0)))));
    sub_ln1067_1_fu_279_p2 <= std_logic_vector(signed(ap_const_lv5_18) - signed(trunc_ln1067_reg_524));
    sub_ln1067_fu_243_p2 <= std_logic_vector(unsigned(ap_const_lv5_0) - unsigned(trunc_ln1067_fu_240_p1));
    sub_ln1074_1_fu_155_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(ap_sig_allocacmp_rem_1));
    sub_ln1074_2_fu_321_p2 <= std_logic_vector(unsigned(trunc_ln1074_reg_500_pp0_iter1_reg) - unsigned(trunc_ln1074_1_reg_508_pp0_iter1_reg));
    sub_ln1074_3_fu_325_p2 <= std_logic_vector(unsigned(trunc_ln1074_1_reg_508_pp0_iter1_reg) - unsigned(trunc_ln1074_reg_500_pp0_iter1_reg));
    sub_ln1074_fu_149_p2 <= std_logic_vector(unsigned(ap_const_lv32_37) - unsigned(ap_sig_allocacmp_rem_1));
    
    tmp_fu_183_p4_proc : process(val_fu_78)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_fu_183_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := val_fu_78;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_fu_183_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_fu_183_p4_i) := val_fu_78(32-1-tmp_fu_183_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_183_p4 <= resvalue(32-1 downto 0);
    end process;

    trunc_ln1049_fu_385_p1 <= val_1_reg_541(24 - 1 downto 0);
    trunc_ln1067_1_fu_361_p1 <= lshr_ln1067_reg_536(24 - 1 downto 0);
    trunc_ln1067_2_fu_364_p1 <= lshr_ln1067_1_reg_546(24 - 1 downto 0);
    trunc_ln1067_fu_240_p1 <= rem_1_reg_477(5 - 1 downto 0);
    trunc_ln1071_fu_388_p1 <= lshr_ln1071_reg_556(24 - 1 downto 0);
    trunc_ln1074_1_fu_171_p1 <= sub_ln1074_fu_149_p2(5 - 1 downto 0);
    trunc_ln1074_2_fu_221_p1 <= lshr_ln1074_fu_215_p2(24 - 1 downto 0);
    trunc_ln1074_3_fu_352_p1 <= lshr_ln1074_1_fu_346_p2(24 - 1 downto 0);
    trunc_ln1074_fu_167_p1 <= sub_ln1074_1_fu_155_p2(5 - 1 downto 0);
    xor_ln1071_fu_397_p2 <= (shl_ln1071_reg_566 xor ap_const_lv24_FFFFFF);
    xor_ln1074_1_fu_336_p2 <= (select_ln1074_fu_329_p3 xor ap_const_lv5_1F);
    xor_ln1074_fu_193_p2 <= (trunc_ln1074_reg_500 xor ap_const_lv5_1F);
    zext_ln1067_1_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1067_1_fu_279_p2),24));
    zext_ln1067_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1067_fu_243_p2),32));
    zext_ln1071_1_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1067_reg_524),24));
    zext_ln1071_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1071_fu_294_p2),32));
    zext_ln1074_1_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln1074_1_fu_336_p2),32));
    zext_ln1074_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1074_2_fu_205_p3),32));
end behav;
