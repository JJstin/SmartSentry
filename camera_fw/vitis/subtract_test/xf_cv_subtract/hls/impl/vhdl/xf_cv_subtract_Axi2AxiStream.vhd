-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity xf_cv_subtract_Axi2AxiStream is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    din : IN STD_LOGIC_VECTOR (63 downto 0);
    ldata_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    ldata_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    ldata_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    ldata_full_n : IN STD_LOGIC;
    ldata_write : OUT STD_LOGIC );
end;


architecture behav of xf_cv_subtract_Axi2AxiStream is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_17BB00 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000101111011101100000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal gmem0_blk_n_AR : STD_LOGIC;
    signal trunc_ln_fu_80_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln_reg_101 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ap_start : STD_LOGIC;
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ap_done : STD_LOGIC;
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ap_idle : STD_LOGIC;
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ap_ready : STD_LOGIC;
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_AWVALID : STD_LOGIC;
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_WVALID : STD_LOGIC;
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_WLAST : STD_LOGIC;
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARVALID : STD_LOGIC;
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_RREADY : STD_LOGIC;
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_BREADY : STD_LOGIC;
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ldata_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ldata_write : STD_LOGIC;
    signal grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal sext_ln1021_fu_90_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component xf_cv_subtract_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem0_AWREADY : IN STD_LOGIC;
        m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WVALID : OUT STD_LOGIC;
        m_axi_gmem0_WREADY : IN STD_LOGIC;
        m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_WLAST : OUT STD_LOGIC;
        m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem0_ARREADY : IN STD_LOGIC;
        m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RVALID : IN STD_LOGIC;
        m_axi_gmem0_RREADY : OUT STD_LOGIC;
        m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_RLAST : IN STD_LOGIC;
        m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BVALID : IN STD_LOGIC;
        m_axi_gmem0_BREADY : OUT STD_LOGIC;
        m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        ldata_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ldata_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        ldata_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        ldata_full_n : IN STD_LOGIC;
        ldata_write : OUT STD_LOGIC;
        sext_ln1021 : IN STD_LOGIC_VECTOR (61 downto 0) );
    end component;



begin
    grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71 : component xf_cv_subtract_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ap_start,
        ap_done => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ap_done,
        ap_idle => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ap_idle,
        ap_ready => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ap_ready,
        m_axi_gmem0_AWVALID => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY => ap_const_logic_0,
        m_axi_gmem0_AWADDR => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY => ap_const_logic_0,
        m_axi_gmem0_WDATA => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_WLAST,
        m_axi_gmem0_WID => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_WID,
        m_axi_gmem0_WUSER => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY => m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID => m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA => m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST => m_axi_gmem0_RLAST,
        m_axi_gmem0_RID => m_axi_gmem0_RID,
        m_axi_gmem0_RFIFONUM => m_axi_gmem0_RFIFONUM,
        m_axi_gmem0_RUSER => m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP => m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID => ap_const_logic_0,
        m_axi_gmem0_BREADY => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP => ap_const_lv2_0,
        m_axi_gmem0_BID => ap_const_lv1_0,
        m_axi_gmem0_BUSER => ap_const_lv1_0,
        ldata_din => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ldata_din,
        ldata_num_data_valid => ap_const_lv3_0,
        ldata_fifo_cap => ap_const_lv3_0,
        ldata_full_n => ldata_full_n,
        ldata_write => grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ldata_write,
        sext_ln1021 => trunc_ln_reg_101);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ap_done = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ap_ready = ap_const_logic_1)) then 
                    grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((m_axi_gmem0_ARREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                trunc_ln_reg_101 <= din(63 downto 2);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem0_ARREADY, ap_block_state1, grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ap_done, ap_CS_fsm_state10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((m_axi_gmem0_ARREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ap_done)
    begin
        if ((grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(m_axi_gmem0_ARREADY, ap_block_state1)
    begin
        if (((m_axi_gmem0_ARREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ap_done, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    gmem0_blk_n_AR_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, m_axi_gmem0_ARREADY)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            gmem0_blk_n_AR <= m_axi_gmem0_ARREADY;
        else 
            gmem0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;

    grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ap_start <= grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ap_start_reg;

    internal_ap_ready_assign_proc : process(grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ap_done, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ap_done = ap_const_logic_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ldata_din <= grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ldata_din;

    ldata_write_assign_proc : process(grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ldata_write, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ldata_write <= grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_ldata_write;
        else 
            ldata_write <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem0_ARADDR_assign_proc : process(ap_CS_fsm_state1, m_axi_gmem0_ARREADY, ap_block_state1, grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARADDR, ap_CS_fsm_state9, ap_CS_fsm_state10, sext_ln1021_fu_90_p1)
    begin
        if ((not(((m_axi_gmem0_ARREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem0_ARADDR <= sext_ln1021_fu_90_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem0_ARADDR <= grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARADDR;
        else 
            m_axi_gmem0_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_gmem0_ARBURST_assign_proc : process(grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARBURST, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem0_ARBURST <= grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARBURST;
        else 
            m_axi_gmem0_ARBURST <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_gmem0_ARCACHE_assign_proc : process(grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARCACHE, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem0_ARCACHE <= grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARCACHE;
        else 
            m_axi_gmem0_ARCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem0_ARID_assign_proc : process(grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARID, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem0_ARID <= grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARID;
        else 
            m_axi_gmem0_ARID <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_gmem0_ARLEN_assign_proc : process(ap_CS_fsm_state1, m_axi_gmem0_ARREADY, ap_block_state1, grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARLEN, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((not(((m_axi_gmem0_ARREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem0_ARLEN <= ap_const_lv64_17BB00(32 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem0_ARLEN <= grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARLEN;
        else 
            m_axi_gmem0_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_gmem0_ARLOCK_assign_proc : process(grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARLOCK, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem0_ARLOCK <= grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARLOCK;
        else 
            m_axi_gmem0_ARLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_gmem0_ARPROT_assign_proc : process(grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARPROT, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem0_ARPROT <= grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARPROT;
        else 
            m_axi_gmem0_ARPROT <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_gmem0_ARQOS_assign_proc : process(grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARQOS, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem0_ARQOS <= grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARQOS;
        else 
            m_axi_gmem0_ARQOS <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem0_ARREGION_assign_proc : process(grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARREGION, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem0_ARREGION <= grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARREGION;
        else 
            m_axi_gmem0_ARREGION <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem0_ARSIZE_assign_proc : process(grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARSIZE, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem0_ARSIZE <= grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARSIZE;
        else 
            m_axi_gmem0_ARSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_gmem0_ARUSER_assign_proc : process(grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARUSER, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem0_ARUSER <= grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARUSER;
        else 
            m_axi_gmem0_ARUSER <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_gmem0_ARVALID_assign_proc : process(ap_CS_fsm_state1, m_axi_gmem0_ARREADY, ap_block_state1, grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARVALID, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((not(((m_axi_gmem0_ARREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem0_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem0_ARVALID <= grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_ARVALID;
        else 
            m_axi_gmem0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem0_AWVALID <= ap_const_logic_0;
    m_axi_gmem0_BREADY <= ap_const_logic_0;

    m_axi_gmem0_RREADY_assign_proc : process(grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_RREADY, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_gmem0_RREADY <= grp_Axi2AxiStream_Pipeline_VITIS_LOOP_1021_1_fu_71_m_axi_gmem0_RREADY;
        else 
            m_axi_gmem0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_WDATA <= ap_const_lv32_0;
    m_axi_gmem0_WID <= ap_const_lv1_0;
    m_axi_gmem0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_WSTRB <= ap_const_lv4_0;
    m_axi_gmem0_WUSER <= ap_const_lv1_0;
    m_axi_gmem0_WVALID <= ap_const_logic_0;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

        sext_ln1021_fu_90_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_80_p4),64));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln_fu_80_p4 <= din(63 downto 2);
end behav;
